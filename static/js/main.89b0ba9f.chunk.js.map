{"version":3,"sources":["services/location.service.js","services/weather.service.js","components/today.jsx","components/location.jsx","components/current-date.jsx","components/header.jsx","components/footer.jsx","App.js","serviceWorker.js","index.js"],"names":["LOCATION_URL","getLocation","a","fetch","process","response","ok","json","Error","status","WEATHER_FORECAST_URL","getweekForcast","coord","Today","weather","className","icon","temperature","summary","Location","city","country","CurrentDate","now","Date","formattedDate","Intl","DateTimeFormat","dateStyle","format","Header","Footer","daily","data","filter","d","map","day","key","time","getDay","temperatureMax","temperatureMin","App","state","currently","coords","loc","console","log","this","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89b0ba9f.chunk.js","sourcesContent":["const LOCATION_URL = 'https://ipinfo.io/geo';\r\n\r\nexport async function getLocation() {\r\n  const response = await fetch(\r\n    `${LOCATION_URL}?token=${process.env.REACT_APP_LOCATION_KEY}`\r\n  );\r\n  if (response.ok) {\r\n    return await response.json();\r\n  }\r\n  throw new Error(response.status);\r\n}\r\n","const WEATHER_FORECAST_URL = 'https://api.darksky.net/forecast/';\r\n\r\nexport async function getweekForcast(coord) {\r\n  const response = await fetch(\r\n    `${WEATHER_FORECAST_URL}${process.env.REACT_APP_DARK_SKY_KEY}/${coord}?exclude=minutely,hourly,alerts,flags&units=si`\r\n  );\r\n\r\n  if (response.ok) {\r\n    return await response.json();\r\n  }\r\n  throw new Error(response.status);\r\n}\r\n","import React from 'react';\r\n\r\nconst Today = ({ weather }) => {\r\n  return (\r\n    <div className=\"today-container\">\r\n      <div className=\"today\">\r\n        <span className=\"today__title\">Today</span>\r\n        <div className=\"today__tempicon\">\r\n          <span className=\"today__icon\">\r\n            <i className={`wi wi-darksky-${weather.icon}`}></i>\r\n          </span>\r\n          <span className=\"today__temperature\">\r\n            {weather.temperature} &#8451;\r\n          </span>\r\n        </div>\r\n        <span className=\"today__status\">{weather.summary}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Today;\r\n","import React from 'react';\r\n\r\nconst Location = ({ city, country }) => {\r\n  return (\r\n    <div className=\"header__location\">\r\n      {city ? city : ''}\r\n      {country ? `, ${country}` : ''}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import React from 'react';\r\n\r\nconst CurrentDate = () => {\r\n  const now = new Date();\r\n  const formattedDate = new Intl.DateTimeFormat('en-US', {\r\n    dateStyle: 'full'\r\n  }).format(now);\r\n\r\n  return <div className=\"header__date\">{formattedDate}</div>;\r\n};\r\n\r\nexport default CurrentDate;\r\n","import React from 'react';\r\n\r\nimport Location from './location';\r\nimport CurrentDate from './current-date';\r\n\r\nconst Header = ({ city, country }) => {\r\n  return (\r\n    <header className=\"header\">\r\n      <Location city={city} country={country} />\r\n      <CurrentDate />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Footer = ({ daily }) => {\r\n  const getDayName = time => {\r\n    const formattedTime = new Date(time * 1000);\r\n    return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][\r\n      formattedTime.getDay()\r\n    ];\r\n  };\r\n  return (\r\n    <footer>\r\n      <div className=\"forecast\">\r\n        {daily.data &&\r\n          daily.data\r\n            .filter(d => d !== daily.data[0])\r\n            .map(day => (\r\n              <div className=\"forecast__item\" key={day.time}>\r\n                <i className={`wi wi-darksky-${day.icon}`}></i>\r\n                <span>{getDayName(day.time)}</span>\r\n                <span>{day.temperatureMax} &#8593;</span>\r\n                <span>{day.temperatureMin} &#8595;</span>\r\n              </div>\r\n            ))}\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\nimport { getLocation } from './services/location.service';\nimport { getWeather, getweekForcast } from './services/weather.service';\nimport './App.scss';\n\nimport Today from './components/today';\nimport Header from './components/header';\nimport Footer from './components/footer';\n\nexport class App extends Component {\n  state = {\n    city: '',\n    country: '',\n    currently: {},\n    daily: {},\n    coords: {}\n  };\n  async componentDidMount() {\n    try {\n      const { city, country, loc } = await getLocation();\n      // const location = { city: city, country: country };\n      const { currently, daily } = await getweekForcast(loc);\n\n      console.log('currently', currently);\n      console.log(daily);\n\n      this.setState({ city, country, currently, daily });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const { city, country, currently, daily } = this.state;\n    return (\n      <div className=\"container\">\n        <Header city={city} country={country} />\n        <Today weather={currently} />\n        <Footer daily={daily} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["services/location.service.js","services/weather.service.js","components/today.jsx","components/location.jsx","components/current-date.jsx","components/header.jsx","components/footer.jsx","App.js","serviceWorker.js","index.js"],"names":["LOCATION_URL","getLocation","a","fetch","process","response","ok","json","Error","status","WEATHER_URL","getWeather","city","Today","state","main","humidity","pressure","temp","temp_max","temp_min","weather","days","this","props","onLocationChange","setState","console","log","className","icon","Component","Location","location","CurrentDate","now","Date","formattedDate","Intl","DateTimeFormat","dateStyle","format","Header","Footer","App","useState","setLocation","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAAMA,EAAe,oBAEd,SAAeC,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEACkBC,MAAM,GAAD,OACvBH,EADuB,kBACDI,mBAFtB,YACCC,EADD,QAIQC,GAJR,gCAKUD,EAASE,OALnB,qDAOC,IAAIC,MAAMH,EAASI,QAPpB,4C,sBCFP,IAAMC,EAAc,kDAIb,SAAeC,EAAtB,kC,4CAAO,WAA0BC,GAA1B,eAAAV,EAAA,sEACkBC,MAAM,GAAD,OACvBO,EADuB,cACNE,EADM,+BACqBR,qCAF5C,YACCC,EADD,QAIQC,GAJR,gCAKUD,EAASE,OALnB,qDAOC,IAAIC,MAAMH,EAASI,QAPpB,4C,sBCAA,IA6CQI,EA7Cf,2MACEC,MAAQ,CACNF,KAAM,GACNG,KAAM,CACJC,SAAU,EACVC,SAAU,EACVC,KAAM,EACNC,SAAU,EACVC,SAAU,GAEZC,QAAS,CAAC,IACVC,KAAM,IAXV,oOAe6BrB,IAf7B,uBAecW,EAfd,EAecA,KACRW,KAAKC,MAAMC,iBAAiBb,GAhBlC,SAiBsCD,EAAWC,GAjBjD,gBAiBcG,EAjBd,EAiBcA,KAAMM,EAjBpB,EAiBoBA,QACdE,KAAKG,SAAS,CAAEd,OAAMS,UAASN,SAlBrC,kDAoBMY,QAAQC,IAAR,MApBN,+IAwBI,IAAMP,EAAUE,KAAKT,MAAMO,QAAQ,GAEnC,OACE,yBAAKQ,UAAU,mBACb,yBAAKA,UAAU,SACb,0BAAMA,UAAU,gBAAhB,SACA,yBAAKA,UAAU,mBACb,0BAAMA,UAAU,eACd,uBAAGA,UAAS,kBAAaR,EAAQS,SAEnC,0BAAMD,UAAU,sBACbN,KAAKT,MAAMC,KAAKG,KADnB,YAIF,0BAAMW,UAAU,iBAAiBR,EAAQN,YAtCnD,GAA2BgB,aCMZC,EARE,SAAAR,GACf,OACE,yBAAKK,UAAU,oBACZL,EAAMS,SAAWT,EAAMS,SAASrB,KAAO,KCM/BsB,EATK,WAClB,IAAMC,EAAM,IAAIC,KACVC,EAAgB,IAAIC,KAAKC,eAAe,QAAS,CACrDC,UAAW,SACVC,OAAON,GAEV,OAAO,yBAAKN,UAAU,gBAAgBQ,ICMzBK,EATA,SAAAlB,GACb,OACE,4BAAQK,UAAU,UAChB,kBAAC,EAAD,CAAUjB,KAAMY,EAAMS,WACtB,kBAAC,EAAD,QCKSU,EAZA,WACb,OACE,gCACE,yBAAKd,UAAU,cACb,yBAAKA,UAAU,2BAAf,SACA,yBAAKA,UAAU,oBAAf,YACA,yBAAKA,UAAU,oBAAf,qBCWOe,EAZH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTZ,EADS,KACCa,EADD,KAGhB,OACE,yBAAKjB,UAAU,aACb,kBAAC,EAAD,CAAQI,SAAUA,IAClB,kBAAC,EAAD,CAAOR,iBAAkB,SAAAQ,GAAQ,OAAIa,EAAYb,MACjD,kBAAC,EAAD,QCFcc,QACW,cAA7BC,OAAOf,SAASgB,UAEe,UAA7BD,OAAOf,SAASgB,UAEhBD,OAAOf,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.54d898e3.chunk.js","sourcesContent":["const LOCATION_URL = 'https://ipinfo.io';\r\n\r\nexport async function getLocation() {\r\n  const response = await fetch(\r\n    `${LOCATION_URL}?token=${process.env.REACT_APP_LOCATION_KEY}`\r\n  );\r\n  if (response.ok) {\r\n    return await response.json();\r\n  }\r\n  throw new Error(response.status);\r\n}\r\n","const WEATHER_URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst WEATHER_DAILY_URL =\r\n  'https://api.openweathermap.org/data/2.5/forecast/daily';\r\n\r\nexport async function getWeather(city) {\r\n  const response = await fetch(\r\n    `${WEATHER_URL}?q=${city}&units=metric&appid=${process.env.REACT_APP_WEATHER_KEY}`\r\n  );\r\n  if (response.ok) {\r\n    return await response.json();\r\n  }\r\n  throw new Error(response.status);\r\n}\r\n\r\nexport async function getweekForcast(city, days = 7) {\r\n  const response = await fetch(\r\n    `${WEATHER_DAILY_URL}?q=${city}&appid=${process.env.REACT_APP_WEATHER_KEY}&cnt=${days}`\r\n  );\r\n  if (response.ok) {\r\n    return await response.json();\r\n  }\r\n  throw new Error(response.status);\r\n}\r\n","import React, { Component } from 'react';\r\nimport { getLocation } from '../services/location.service';\r\nimport { getWeather, getweekForcast } from '../services/weather.service';\r\n\r\nexport class Today extends Component {\r\n  state = {\r\n    city: '',\r\n    main: {\r\n      humidity: 0,\r\n      pressure: 0,\r\n      temp: 0,\r\n      temp_max: 0,\r\n      temp_min: 0\r\n    },\r\n    weather: [{}],\r\n    days: []\r\n  };\r\n  async componentDidMount() {\r\n    try {\r\n      const { city } = await getLocation();\r\n      this.props.onLocationChange(city);\r\n      const { main, weather } = await getWeather(city);\r\n      this.setState({ city, weather, main });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  render() {\r\n    const weather = this.state.weather[0];\r\n\r\n    return (\r\n      <div className=\"today-container\">\r\n        <div className=\"today\">\r\n          <span className=\"today__title\">Today</span>\r\n          <div className=\"today__tempicon\">\r\n            <span className=\"today__icon\">\r\n              <i className={`owi owi-${weather.icon}`}></i>\r\n            </span>\r\n            <span className=\"today__temperature\">\r\n              {this.state.main.temp} &#8451;\r\n            </span>\r\n          </div>\r\n          <span className=\"today__status\">{weather.main}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Today;\r\n","import React from 'react';\r\n\r\nconst Location = props => {\r\n  return (\r\n    <div className=\"header__location\">\r\n      {props.location ? props.location.city : ''}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import React from 'react';\r\n\r\nconst CurrentDate = () => {\r\n  const now = new Date();\r\n  const formattedDate = new Intl.DateTimeFormat('en-US', {\r\n    dateStyle: 'full'\r\n  }).format(now);\r\n\r\n  return <div className=\"header__date\">{formattedDate}</div>;\r\n};\r\n\r\nexport default CurrentDate;\r\n","import React from 'react';\r\n\r\nimport Location from './location';\r\nimport CurrentDate from './current-date';\r\n\r\nconst Header = props => {\r\n  return (\r\n    <header className=\"header\">\r\n      <Location city={props.location} />\r\n      <CurrentDate />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className=\"navigation\">\r\n        <div className=\"navigation__item active\">Today</div>\r\n        <div className=\"navigation__item\">Tomorrow</div>\r\n        <div className=\"navigation__item\">Next 7 days -></div>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport Today from './components/today';\nimport Header from './components/header';\nimport Footer from './components/footer';\n\nconst App = () => {\n  const [location, setLocation] = useState('');\n\n  return (\n    <div className=\"container\">\n      <Header location={location} />\n      <Today onLocationChange={location => setLocation(location)} />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}